0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?
    It is the longest word in the English language published in a dictionary. It is invented the disease known as silicosis.
1.  According to its man page, what does getrusage do?
    It returns resource usage measures for:
    - RUSAGE_SELF (return resource usage statistics for the calling process, which is the sum of resources used by all threads in the process); in speller.c
    - RUSAGE_CHILDREN (return  resource  usage statistics for all children of the calling process that have terminated and been waited for);
    - RUSAGE_THREAD (return resource usage statistics for the calling thread).
2.  Per that same man page, how many members are in a variable of type struct rusage?
    There are 16 members in a variable of type struct rusage.
3.  Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
    We pass before and after by reference because it is much faster than passing by value. Also copies, created by passing by value stay in stack and can later cause stack overflow.
4.  Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.
    Using fgetc (get the next character fom a file) we iterate over characters in .txt file which we want to check for spelling. If we reach the end of file, fgetc will return EOF in c. Thus we iterate over characters as long as c is not the end of file(EOF).
        We check if c is alphabetical character via asalpha, or if c is apostrophe. Apostrophe can't be at the beginning of the word. Thus we check for apostrophe only if index is more than 0. If it's 0, we allow only alphabetical charachters.
            We add a character to the word and increment index, so that the next character doesn't overwrite the previous one.
            We check if the length of the word is not more than 45. If it's not, we move cursor to the next character in the file till the word in file is over.
                If it is more than 45, while next character is not the end of file and is an alphabetical character, we set index to 0 to prepare for a new word.
        if c is a digit,
            while the next character is not the end of file and is alphanumeric, ser index to 0 to prepare for a new word.
        if index is not 0, we have the whole word!
            mark the end of this word setting word[index] to \0
            increment counter of the words in text
            return resource usage statistics for the calling process (before)
            check for spelling: call function check, if it doesn't find a word in the dictionary, it returns false and the function misspelled returns true
            return resource usage statistics for the calling process (after)
            update time in check via adding the result of calling the calculate function with the result of getrussage for before and after
            if bool misspelled returns true
               print out misspelled word
               increment counter of the misspellings
            set index to 0 and prepare for the next word
5.  Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
    We use fgetc so we could check if the character is alphabetical. Scanf will recognize punctuation as a part of the word, because it is looking for spaces only as signs of the end of the word. And scanf doesn't allow to check if the word is not more than 45 characters. Thus we can overwrite important data or face segmentation fault.
6.  Why do you think we declared the parameters for check and load as const (which means "constant")?
    Because constant prevents changing the data pinted to. We don't want to change the data in the dictionary we are loading and the word fom the text we are matching to the dictionary.
